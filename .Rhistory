require("dplyr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("plotly")
test = function(){
iris
}
x = test()
rm(list = ls())
# load rawData
source("RawData.R")
# load rawData
source("RawData.R")
# load rawData
source("DataLoader.R")
head(rawData)
summary(rawData)
# function to fill in missing values in a column witht the mean value of that column
MeanValueNaFill = function(dataFrame, column) {
# calculate mean value of column
meanValue = mean(dataFrame[[column]][[which(!is.na(dataFrame[[column]]))]])
returnDataFrame[[column]][which(is.na(dataFrame[[column]]))] = meanValue
return(returnDataFrame)
}
x = MeanValueNaFill(rawData, "Age")
dataFrame[[column]]
rawData[["Age"]]
# function to fill in missing values in a column witht the mean value of that column
MeanValueNaFill = function(dataFrame, column) {
# calculate mean value of column
meanValue = mean(dataFrame[[column]][which(!is.na(dataFrame[[column]]))])
returnDataFrame[[column]][which(is.na(dataFrame[[column]]))] = meanValue
return(returnDataFrame)
}
x = MeanValueNaFill(rawData, "Age")
# function to fill in missing values in a column witht the mean value of that column
MeanValueNaFill = function(dataFrame, column) {
# calculate mean value of column
meanValue = mean(dataFrame[[column]][which(!is.na(dataFrame[[column]]))])
dataFrame[[column]][which(is.na(dataFrame[[column]]))] = meanValue
return(dataFrame)
}
x = MeanValueNaFill(rawData, "Age")
summary(x)
summary(rawData)
summary(rawData)
# fill in missing values of age and fare with their mean values
cleanData = MeanValueNaFill(MeanValueNaFill(rawData, "Fare"), "Age")
summary(cleanData)
summary(cleanData)
rm(list = ls())
# load clean data from DataCleaner
source("DataCleaner.R")
cleanData[["Emabarked"]][which(is.na(cleanData[["Embarked"]]))]
rm(list = ls())
# load rawData from DataLoader
source("DataLoader.R")
# function to fill in missing values in a column witht the mean value of that column
MeanValueNaFill = function(dataFrame, column) {
# calculate mean value of column
meanValue = mean(dataFrame[[column]][which(!is.na(dataFrame[[column]]))])
dataFrame[[column]][which(is.na(dataFrame[[column]]))] = meanValue
return(dataFrame)
}
# fill in missing values of age and fare with their mean values
cleanData = MeanValueNaFill(MeanValueNaFill(rawData, "Fare"), "Age")
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(is.na(cleanData[["Embarked"]]))] = "S"
summary(rawData)
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(cleanData[["Embarked"]]) != unique(cleanData[["Embarked"]])] = "S"
notany
notin
x in x
1 ==2
1 ==2 OR 1 ==3
1 ==2 | 1 ==3
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(cleanData[["Embarked"]]) != "S" | "C"] = "S"
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(cleanData[["Embarked"]]) == ""] = "S"
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(cleanData[["Embarked"]]) == "")] = "S"
# fill in missing value of embarked with 'S'
cleanData[["Emabarked"]][which(cleanData[["Embarked"]] == "")]= "S"
cleanData[["Emabarked"]][which(cleanData[["Embarked"]] == "")]
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == "")]
summary(rawData)
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == "")]
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == " ")]
length(cleanData[["Embarked"]][which(cleanData[["Embarked"]] == " ")])
# fill in missing value of embarked with 'S'
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == " ")] = "S"
summary(cleanData)
# load rawData from DataLoader
source("DataLoader.R")
# function to fill in missing values in a column witht the mean value of that column
MeanValueNaFill = function(dataFrame, column) {
# calculate mean value of column
meanValue = mean(dataFrame[[column]][which(!is.na(dataFrame[[column]]))])
dataFrame[[column]][which(is.na(dataFrame[[column]]))] = meanValue
return(dataFrame)
}
# fill in missing values of age and fare with their mean values
cleanData = MeanValueNaFill(MeanValueNaFill(rawData, "Fare"), "Age")
# fill in missing value of embarked with 'S'
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == " ")] = "S"
summary(cleanData)
unique(rawData$Embarked)
# convert embarked field to type string
cleanData[["Embarked"]] = as.character(cleanData[["Embarked"]])
# fill in missing value of embarked with 'S'
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == " ")] = "S"
summary(cleanData)
unique(cleanData$Embarked)
# fill in missing value of embarked with 'S'
cleanData[["Embarked"]][which(cleanData[["Embarked"]] == "")] = "S"
unique(cleanData$Embarked)
summary(cleanData)
rm(list = ls)
rm(list = ls())
# load clean data from DataCleaner
source("DataCleaner.R")
# remove rawData from memory
rm(rawData, MeanValueNaFill)
# load clean data from DataCleaner
source("DataCleaner.R")
names(cleanData)
x = cleanData$Name[1]
strsplit(x, " ")
x
strsplit(x[1], " ")
x[1]
x[[1]]
x = cleanData$Name[1][1]
x
x = cleanData$Name[1][[1]]
x
x = cleanData$Name[1][[1]]
x = cleanData$Name[[1]]
x
x = cleanData$Name[[1]][1]
x
x = cleanData$Name[[1]][[1]]
x
x = cleanData$Name[[1]][2]
x
names(cleanData)
# load clean data from DataCleaner
source("DataCleaner.R")
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]]
}
x = cleanData$Name[1]
x
x = cleanData$Name[1][[1]]
x
x = cleanData$Name[1][[1]][1]
x
x = "hello"
x
x = cleanData$Name[1]
strsplit(x, " ")
strsplit(x, " ")[2]
strsplit(x, " ")[[1]]
strsplit(x, " ")[[1]][2]
strsplkit(strsplit(x, " ")[[1]][2], "[.]")
strsplit(strsplit(x, " ")[[1]][2], "[.]")
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = strsplit(strsplit(dataFrame[["Name"]], " ")[[1]][2], "[.]")
return(dataFrame)
}
x = TitleField(cleanData)
head(x)
cleanData[-["Age"]]
cleanData[["Age"]]
cleanData[[-"Age"]]
cleanData[[!"Age"]]
cleanData-[["Age"]]
cleanData[["Age"]]
cleanData[["Age"]]
drop(cleanData)
drop(cleanData[["Age"]])
rm(list = ls())
# load clean data from DataCleaner
source("DataCleaner.R")
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = strsplit(strsplit(dataFrame[["Name"]], " ")[[1]][2], "[.]")
return(dataFrame)
}
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column from data frame
dataFrame = dataFrame %>% select_(-column)
}
}
x = Binarizer(cleanData, c("Pclass", "Title"))
cleanData[, -c("AGe")]
cleanData[, -c("Age")]
cleanData[-c("Age")]
cleanData[[-c("Age")]]
within(cleanData, rm("Age"))
cleanData
x = within(cleanData, rm("Age"))
names(x)
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = within(dataFrame, rm(column))
}
}
x = Binarizer(cleanData, c("Pclass", "Title"))
?column
column
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = within(dataFrame, rm(paste0(column)))
}
}
x = Binarizer(cleanData, c("Pclass", "Title"))
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = within(dataFrame, rm(column))
}
}
x = Binarizer(cleanData, c("Pclass", "Title"))
head(cleanData)
cleanData = TitleField(cleanData)
x = Binarizer(cleanData, c("Pclass", "Title"))
z = "Age"
within(cleanData, rm(z))
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
}
x = Binarizer(cleanData, c("Pclass", "Title"))
head(x)
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
return(cleanData)
}
x = Binarizer(cleanData, c("Pclass", "Title"))
head(x)
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
return(dataData)
}
x = Binarizer(cleanData, c("Pclass", "Title"))
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
return(dataFrame)
}
x = Binarizer(cleanData, c("Pclass", "Title"))
head(x)
names(x)
rm(list = ls())
# load clean data from DataCleaner
source("DataCleaner.R")
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = strsplit(strsplit(dataFrame[["Name"]], " ")[[1]][2], "[.]")
return(dataFrame)
}
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
return(dataFrame)
}
s = TitleField(cleanData)
d = Binarizer(s, c("Age", "Title"))
head(d)
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = strsplit(strsplit(dataFrame[["Name"]], " ")[2], "[.]")
return(dataFrame)
}
s = TitleField(cleanData)
strsplit(cleanData$Name, " ")
strsplit(cleanData$Name, " ")[[2]]
strsplit(cleanData$Name, " ")[[]]
strsplit(cleanData$Name, " ")[][1]
strsplit(cleanData$Name, " ")[][2]
strsplit(cleanData$Name, " ")[[1]][]
strsplit(cleanData$Name, " ")[[2]][]
strsplit(cleanData$Name, " ")[[]][[2]]
strsplit(cleanData$Name, " ")[][1]
strsplit(cleanData$Name, " ")[[]][1]
strsplit(cleanData$Name, " ")[[]][2]
strsplit(cleanData$Name, " ")[[]][[1]]
strsplit(cleanData$Name, " ")[[1]][[1]]
strsplit(cleanData$Name, " ")[[1]]
strsplit(cleanData$Name, " ")[[1]][1]
strsplit(cleanData$Name, " ")[[]][1]
strsplit(cleanData$Name, " ")
collapse(strsplit(cleanData$Name, " "))
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, " ")[[1]][2], "[.]")
})
return(dataFrame)
}
s = TitleField(cleanData)
d = Binarizer(s, c("Age", "Title"))
head(d)
strsplit(cleanData$Name[1], " ")
strsplit(cleanData$Name[1], " ")[[1]]
strsplit(cleanData$Name[1], " ")[[1]][1]
strsplit(cleanData$Name[1], " ")[[1]][2]
s = TitleField(cleanData)
s$Title
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, " ")[[1]][2], "[.]")[[1]]
})
return(dataFrame)
}
s = TitleField(cleanData)
s$Title
s$Title
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, " ")[[1]][2], "[.]")[[1]]
})
return(dataFrame)
}
s = TitleField(cleanData)
d = Binarizer(s, c("Age", "Title"))
d = Binarizer(s, c("Pclass", "Title"))
head(d)
unique(s$Title)
cleanData$Name[1]
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, ",")[[1]][2], "[.]")[[1]]
})
return(dataFrame)
}
s = TitleField(cleanData)
d = Binarizer(s, c("Pclass", "Title"))
s$Title
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, ",")[[1]][2], "[.]")[[1]][1]
})
return(dataFrame)
}
s = TitleField(cleanData)
s$Title
d = Binarizer(s, c("Pclass", "Title"))
head(d)
rm(list = ls())
# load clean data from DataCleaner
source("DataCleaner.R")
# function to create title field
TitleField = function(dataFrame) {
# create title field from name field
dataFrame[["Title"]] = sapply(dataFrame[["Name"]], function(x) {
strsplit(strsplit(x, ",")[[1]][2], "[.]")[[1]][1]
})
return(dataFrame)
}
# function to convert input columns in input data frame to binary
Binarizer = function(dataFrame, columns) {
for(column in columns) {
print(column)
# create list of unique values in column
uniqueValues = unique(dataFrame[[column]])
for(value in uniqueValues) {
dataFrame[[paste0(column, value)]] = sapply(dataFrame[[column]], FUN = function(x) {
ifelse(x == value, 1, 0)
})
}
# remove column
dataFrame = dataFrame[, !(colnames(dataFrame) %in% (column))]
}
return(dataFrame)
}
# create title field and convert fields to binary
featuredData = Binarizer(TitleField(cleanData), c("Title", "Pclass", "Embarked"))
rm(list = ls())
# load featured data from FeatureEngineering
source("FeatureEngineering")
# load featured data from FeatureEngineering
source("FeatureEngineering.R")
rm(list = ls())
# load featured data from FeatureEngineering
source("FeatureEngineering.R")
head(featuredData)
